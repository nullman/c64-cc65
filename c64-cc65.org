* Org                                                              :noexport:
  #+TITLE: C64 cc65 Programs
  #+AUTHOR: Kyle W T Sherman
  #+EMAIL: kylewsherman@gmail.com
  #+FILENAME: c64-cc65.org
  #+DESCRIPTION: Org/Babel 'Literate' Version of C64 Programs
  #+KEYWORDS: emacs, org-mode, babel, c, cc65, commodore 64, c64, programming language, literate programming, reproducible research
  #+LANGUAGE: en
  #+PROPERTY: header-args :tangle no :noweb yes :padline yes :comments none :results silent :dir /tmp :mkdirp yes
  #+STARTUP: noindent odd overview
  #+TIMESTAMP: <2023-01-10 10:53 (kyle)>

* Constants
  :PROPERTIES:
  :CUSTOM_ID: constants
  :END:

*** Author
    :PROPERTIES:
    :CUSTOM_ID: constants-author
    :END:

    #+NAME: author
    #+BEGIN_SRC org
      Kyle W T Sherman
    #+END_SRC

*** Copyright
    :PROPERTIES:
    :CUSTOM_ID: constants-copyright
    :END:

    #+NAME: year
    #+BEGIN_SRC emacs-lisp
      (format-time-string "%Y" nil t)
    #+END_SRC

    #+NAME: copyright
    #+BEGIN_SRC org
      Copyright Â©2023-<<year()>> <<author>>.
    #+END_SRC

*** Header
    :PROPERTIES:
    :CUSTOM_ID: constants-header
    :END:

    #+NAME: header
    #+BEGIN_SRC org
      // <<copyright>>
      // BSD 2-Clause License
    #+END_SRC

*** License
    :PROPERTIES:
    :CUSTOM_ID: constants-license
    :END:

    #+NAME: license
    #+BEGIN_SRC conf-unix
      BSD 2-Clause License

      <<copyright>>

      All rights reserved.

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:

      1. Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
      FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
      DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
      SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
      CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
      OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    #+END_SRC

* Shared
  :PROPERTIES:
  :CUSTOM_ID: shared
  :END:

*** Common
    :PROPERTIES:
    :CUSTOM_ID: shared-common
    :END:

***** Common H
      :PROPERTIES:
      :CUSTOM_ID: shared-common-common-h
      :END:

      #+NAME: common_h
      #+BEGIN_SRC c
        // Source: https://8bitworkshop.com/

        #ifndef _COMMON_H
        #define _COMMON_H

        #include <conio.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <stdint.h>
        #include <peekpoke.h>
        #include <string.h>
        #include <c64.h>
        #include <joystick.h>

        typedef uint8_t byte;                   // 8-bit unsigned
        typedef int8_t sbyte;                   // 8-bit signed
        typedef uint16_t word;                  // 16-bit unsigned
        typedef enum { false, true } bool;      // boolean

        #define COLS 40                         // total # of columns
        #define ROWS 25                         // total # of rows

        ///// MACROS /////

        // lookup screen address macro
        #define SCRNADR(base,col,row) ((base)+(col)+(row)*40)

        // default screen base address on startup
        #define DEFAULT_SCREEN ((void*)0x400)

        // wait until next frame, same as waitvsync()
        #define wait_vblank waitvsync
        // is raster line > 255?
        #define RASTER_HIBIT  (VIC.ctrl1 & 0x80)

        // set VIC Bank (given the start address)
        #define SET_VIC_BANK(_addr) \
          CIA2.pra = (CIA2.pra & ~3) | (((((_addr)>>8)&0xc0)>>6)^3);

        // set VIC character memory (given the start address)
        #define SET_VIC_BITMAP(_addr) \
          VIC.addr = (VIC.addr & 0b11110001) | ((((_addr)>>8)&0x38)>>2);

        // set VIC screen memory (given the start address)
        #define SET_VIC_SCREEN(_addr) \
          VIC.addr = (VIC.addr & 0b00001111) | ((((_addr)>>8)&0x3c)<<2);

        // set scrolling registers
        #define SET_SCROLL_Y(_y) \
          VIC.ctrl1 = (VIC.ctrl1 & 0xf8) | (_y);

        #define SET_SCROLL_X(_x) \
          VIC.ctrl2 = (VIC.ctrl2 & 0xf8) | (_x);


        // enable RAM from 0xa000-0xffff, disable interrupts
        #define ENABLE_HIMEM() \
          asm("php"); \
          asm("sei"); \
          POKE(1, PEEK(1) & ~0b111);

        // enable ROM and interrupts
        #define DISABLE_HIMEM() \
          POKE(1, PEEK(1) | 0b111); \
          asm("plp");

        ///// FUNCTIONS /////

        // wait until specific raster line
        void raster_wait(byte line);

        // get current VIC bank start address
        char* get_vic_bank_start();

        // get current screen memory address
        char* get_screen_memory();

        // return key in buffer, or 0 if none (BIOS call)
        char __fastcall__ poll_keyboard();

        #endif
      #+END_SRC

***** Common C
      :PROPERTIES:
      :CUSTOM_ID: shared-common-common-c
      :END:

      #+NAME: common_c
      #+BEGIN_SRC c
        // Source: https://8bitworkshop.com/

        #include "common.h"

        void raster_wait(byte line) {
          while (VIC.rasterline < line) ;
        }

        void wait_vblank(void) {
          raster_wait(255);
        }

        static byte VIC_BANK_PAGE[4] = {
          0xc0, 0x80, 0x40, 0x00
        };

        char* get_vic_bank_start() {
          return (char*)(VIC_BANK_PAGE[CIA2.pra & 3] << 8);
        }

        char* get_screen_memory() {
          return ((VIC.addr & 0xf0) << 6) + get_vic_bank_start();
        }

        char __fastcall__ poll_keyboard() {
          asm("jmp $f142");
          return __A__;
        }
      #+END_SRC

* Programs
  :PROPERTIES:
  :CUSTOM_ID: programs
  :END:

*** Hello World
    :PROPERTIES:
    :CUSTOM_ID: programs-hello-world
    :END:

***** Makefile
      :PROPERTIES:
      :CUSTOM_ID: programs-hello-world-makefile
      :END:

      #+BEGIN_SRC makefile :tangle hello-world/Makefile
        .RECIPEPREFIX = >

        CXX = cc65
        CLX = cl65
        CXXFLAGS = -t c64 -O

        all: helloworld.prg

        helloworld.prg:
        > $(CLX) $(CXXFLAGS) -o helloworld.prg *.c

        clean:
        > rm -f *.prg *.inc *.o
      #+END_SRC

***** helloworld
      :PROPERTIES:
      :CUSTOM_ID: programs-hello-world-helloworld
      :END:

      #+BEGIN_SRC c :tangle hello-world/helloworld.c
        /**
         ,* Hello World
         ,*/

        #include <cbm.h>
        #include <stdio.h>
        #include <stdlib.h>

        int main(void) {
            cbm_k_bsout(CH_FONT_UPPER);
            printf("hello world!\n");
            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run
      :PROPERTIES:
      :CUSTOM_ID: programs-hello-world-build-and-run
      :END:

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd hello-world
        make clean && make && x64sc helloworld.prg &
      #+END_SRC

*** System Info
    :PROPERTIES:
    :CUSTOM_ID: programs-system-info
    :END:

***** Makefile
      :PROPERTIES:
      :CUSTOM_ID: programs-system-info-makefile
      :END:

      #+BEGIN_SRC makefile :tangle system-info/Makefile
        .RECIPEPREFIX = >

        CXX = cc65
        CLX = cl65
        CXXFLAGS = -t c64 -O

        all: systeminfo.prg

        systeminfo.prg:
        > $(CLX) $(CXXFLAGS) -o systeminfo.prg *.c

        clean:
        > rm -f *.prg *.inc *.o
      #+END_SRC

***** systeminfo
      :PROPERTIES:
      :CUSTOM_ID: programs-system-info-systeminfo
      :END:

      #+BEGIN_SRC c :tangle system-info/systeminfo.c
        /**
         ,* System Info
         ,*/

        #include <c64.h>
        #include <cc65.h>
        #include <conio.h>
        #include <ctype.h>
        #include <modload.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <tgi.h>

        int main(void) {
            // setup tgi
            tgi_install(tgi_static_stddrv);
            tgi_init();

            // output system info
            printf("char, int, long sizes: %d, %d, %d\n",
                   sizeof((char) 0), sizeof((int) 0), sizeof((long) 0));
            printf("x res: %d, y res: %d, colors: %d\n",
                   tgi_getxres(), tgi_getyres(), tgi_getcolorcount());

            // cleanup tgi
            tgi_uninstall();

            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run
      :PROPERTIES:
      :CUSTOM_ID: programs-system-info-build-and-run
      :END:

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd system-info
        make clean && make && x64sc systeminfo.prg &
      #+END_SRC

*** Qix Lines
    :PROPERTIES:
    :CUSTOM_ID: programs-qix-lines
    :END:

***** Makefile
      :PROPERTIES:
      :CUSTOM_ID: programs-qix-lines-makefile
      :END:

      #+BEGIN_SRC makefile :tangle qix-lines/Makefile
        .RECIPEPREFIX = >

        CXX = cc65
        CLX = cl65
        CXXFLAGS = -t c64 -O

        all: qixlines.prg

        qixlines.prg:
        > $(CLX) $(CXXFLAGS) -o qixlines.prg *.c

        clean:
        > rm -f *.prg *.inc *.o
      #+END_SRC

***** qixlines
      :PROPERTIES:
      :CUSTOM_ID: programs-qix-lines-qixlines
      :END:

      #+BEGIN_SRC c :tangle qix-lines/qixlines.c
        /**
         ,* QIX Lines
         ,*/

        #include <c64.h>
        #include <cc65.h>
        #include <conio.h>
        #include <ctype.h>
        #include <modload.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <tgi.h>

        #define MAX_COLORS 16
        #define COLOR_BG TGI_COLOR_BLACK
        #define COLOR_FG TGI_COLOR_WHITE
        #define HISTORY_SIZE 10                 // how many lines to display at once
        #define STEP 10                         // line spacing
        #define STEP_RANGE 9                    // spacing +/- (should be an odd number)
        #define MAX_SIN 180

        // use all colors except black (0)
        #define RANDOM_COLOR() (rand() % (MAX_COLORS - 1) + 1)

        // line
        typedef struct {
            int x1;
            int y1;
            int x2;
            int y2;
        } line_s;

        // globals
        static unsigned int x_size;
        static unsigned int y_size;
        //static unsigned int max_color;

        void set_color(const unsigned char color) {
            unsigned char palette[2];
            palette[0] = COLOR_BG;
            palette[1] = color;
            tgi_setpalette(palette);
            tgi_setcolor(COLOR_FG);
        }

        unsigned int next_degree(unsigned int degree) {
            // add randomly to the degree
            unsigned int d = degree + STEP + (int) rand() % STEP_RANGE - (STEP_RANGE / 2);
            if (d >= MAX_SIN) d = d - MAX_SIN;
            return d;
        }

        // draw lines until a key is pressed
        void draw_lines() {
            line_s line, line_delta, line_degree, line_history[HISTORY_SIZE];
            int history_index;

            // set random color
            tgi_setcolor(RANDOM_COLOR());

            // randomize starting values
            line.x1 = rand() % x_size;
            line.y1 = rand() % y_size;
            line.x2 = rand() % x_size;
            line.y2 = rand() % y_size;

            line_delta.x1 = STEP;
            line_delta.y1 = STEP;
            line_delta.x2 = STEP;
            line_delta.y2 = STEP;

            line_degree.x1 = rand() % MAX_SIN;
            line_degree.y1 = rand() % MAX_SIN;
            line_degree.x2 = rand() % MAX_SIN;
            line_degree.y2 = rand() % MAX_SIN;
            history_index = 0;

            // loop until key-press
            while (!kbhit()) {
                // add randomly to the degrees
                line_degree.x1 = next_degree(line_degree.x1);
                line_degree.y1 = next_degree(line_degree.y1);
                line_degree.x2 = next_degree(line_degree.x2);
                line_degree.y2 = next_degree(line_degree.y2);

                // add using sin modified by a delta for each coordinate dimension
                line.x1 += (int) (((long) line_delta.x1 * _sin(line_degree.x1)) / 256);
                line.y1 += (int) (((long) line_delta.y1 * _sin(line_degree.y1)) / 256);
                line.x2 += (int) (((long) line_delta.x2 * _sin(line_degree.x2)) / 256);
                line.y2 += (int) (((long) line_delta.y2 * _sin(line_degree.y2)) / 256);

                // if any coordinates are out of range, reverse their direction and change color
                if (line.x1 < 0) {
                    line.x1 = 0 - line.x1;
                    line_delta.x1 = -line_delta.x1;
                    set_color(RANDOM_COLOR());
                }
                if (line.x1 >= x_size) {
                    line.x1 = x_size - (line.x1 - x_size);
                    line_delta.x1 = -line_delta.x1;
                    set_color(RANDOM_COLOR());
                }
                if (line.y1 < 0) {
                    line.y1 = 0 - line.y1;
                    line_delta.y1 = -line_delta.y1;
                    set_color(RANDOM_COLOR());
                }
                if (line.y1 >= y_size) {
                    line.y1 = y_size - (line.y1 - y_size);
                    line_delta.y1 = -line_delta.y1;
                    set_color(RANDOM_COLOR());
                }
                if (line.x2 < 0) {
                    line.x2 = 0 - line.x2;
                    line_delta.x2 = -line_delta.x2;
                    set_color(RANDOM_COLOR());
                }
                if (line.x2 >= x_size) {
                    line.x2 = x_size - (line.x2 - x_size);
                    line_delta.x2 = -line_delta.x2;
                    set_color(RANDOM_COLOR());
                }
                if (line.y2 < 0) {
                    line.y2 = 0 - line.y2;
                    line_delta.y2 = -line_delta.y2;
                    set_color(RANDOM_COLOR());
                }
                if (line.y2 >= y_size) {
                    line.y2 = y_size - (line.y2 - y_size);
                    line_delta.y2 = -line_delta.y2;
                    set_color(RANDOM_COLOR());
                }

                // draw line
                tgi_setcolor(COLOR_FG);
                tgi_line(line.x1, line.y1, line.x2, line.y2);

                // remove from history
                tgi_setcolor(COLOR_BG);
                tgi_line(line_history[history_index].x1, line_history[history_index].y1,
                         line_history[history_index].x2, line_history[history_index].y2);

                // add to history
                line_history[history_index++] = line;
                if (history_index >= HISTORY_SIZE) history_index = 0;
            }
            cgetc();                            // consume key-press
        }

        int main(void) {
            unsigned char border_color;

            // setup tgi
            tgi_install(tgi_static_stddrv);
            tgi_init();
            tgi_clear();

            // set globals
            x_size = tgi_getxres();
            y_size = tgi_getyres();
            //max_color = tgi_getmaxcolor();

            // persist border color
            border_color = bordercolor(COLOR_BG);

            // main loop
            draw_lines();

            // restore border color
            bordercolor(border_color);

            // cleanup tgi
            tgi_uninstall();
            clrscr();

            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run
      :PROPERTIES:
      :CUSTOM_ID: programs-qix-lines-build-and-run
      :END:

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd qix-lines
        make clean && make && x64sc qixlines.prg &
      #+END_SRC
